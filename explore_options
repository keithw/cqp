#!/usr/bin/perl -w

use strict;

my $BAD = q{/home/keithw/stanford/bad/models};

my @MACHINES = ( [ qw[machines_aws.csv i2.1x] ],
		 [ qw[machines_aws.csv i2.2x] ],
		 [ qw[machines_aws.csv i2.4x] ],
		 [ qw[machines_aws.csv i2.8x] ] );

sub parse {
  my ( $desired_operation, @results ) = @_;

  # get header line
  $results[ 0 ] =~ s{^\s+}{};
  my @header_fields = split m{\s+}, shift @results;

  # verify expected fields are present
  my @expected_fields = qw{operation nodes start length
			   time.total time.min time.hr
			   time.disk time.net cost};
  die q{Please put 'options(width=10000)' into ~/.Rprofile} unless @header_fields == @expected_fields;

  # parse the rest of the lines
  for ( @results ) {
    my @fields = split m{\s+}, $_;
    shift @fields; # get rid of line number
    die unless scalar @fields == scalar @header_fields;

    my %this_operation;
    for ( my $i = 0; $i <= $#header_fields; $i++ ) {
      $this_operation{ $header_fields[ $i ] } = $fields[ $i ];
    }

    if ( $this_operation{ operation } eq $desired_operation ) {
      return ( \%this_operation );
    }
  }

  die qq{Did not receive results for operation $desired_operation};
}

sub linear_scan {
  my ( $profile, $machine_type, $operation, $node_count, $data_size_GB, $field_num ) = @_;
  chdir $BAD . q{/method1} or die;
  my @results = qx{./point.R ../${profile} i2.8x $machine_type $node_count $data_size_GB $field_num};
  return parse( $operation, @results );
}

sub shuffle_all {
  my ( $profile, $machine_type, $operation, $node_count, $data_size_GB, $field_num ) = @_;
  chdir $BAD . q{/method4} or die;
  my @results = qx{./point.R ../${profile} $machine_type $node_count $data_size_GB $field_num};
  return parse( $operation, @results );
}

sub annotate {
  my ( $key, $value, @hashrefs ) = @_;
  for my $hashref ( @hashrefs ) {
    $hashref->{ $key } = $value;
  }
  return @hashrefs;
}

sub all_methods {
  my @results;

  push @results, annotate( q{method}, q{linear_scan}, linear_scan( @_ ) );
  push @results, annotate( q{method}, q{shuffle_all}, shuffle_all( @_ ) );

  return @results;
}

sub all_machines_and_methods {
  my @results;

  for my $profile_machine ( @MACHINES ) {
    my ( $profile, $machine ) = @$profile_machine;

    push @results, annotate( q{machine}, $profile . q{ } . $machine,
			     all_methods( $profile, $machine, q{all}, @_ ) );
  }

  return @results;
}

my @all_results = all_machines_and_methods( 100, 4000, 0 );

for my $result ( @all_results ) {
  print qq{$result->{ machine } $result->{ method } $result->{ nodes } $result->{ q{time.min} } $result->{ cost }\n};
}
